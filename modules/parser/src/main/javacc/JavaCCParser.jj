options {
  JDK_VERSION="1.8";
  JAVA_TEMPLATE_TYPE = "modern";
  SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
  UNICODE_INPUT = true;
  JAVA_UNICODE_ESCAPE = false;
}

PARSER_BEGIN(JavaCCParser)

package org.dhallj.parser.support;

import java.util.AbstractMap.SimpleImmutableEntry;
import java.util.ArrayList;
import java.util.Deque;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.dhallj.core.Operator;
import org.dhallj.core.Expr;
import org.dhallj.parser.support.Positioned.Wrapped;

final class JavaCCParser {
  private static String trimLabel(String input) {
    return (input.charAt(0) != '`') ? input : input.substring(1, input.length() - 1);
  }
}

PARSER_END(JavaCCParser)

TOKEN_MGR_DECLS : {
  Deque<Boolean> interpolationState = new LinkedList<>();
  Deque<Integer> braceDepth = new LinkedList<>();
  List<Comment> comments = new ArrayList<>();
  WhitespaceManager whitespace = new WhitespaceManager();
}

TOKEN: {
    <WHSP: ([" ", "\t", "\n"] | "\r\n")+ | "{-" | "--"> {
      List<Comment> cs = whitespace.consume(input_stream, matchedToken.image.charAt(0));
      if (cs != null) {
        comments.addAll(cs);
      }
    }
  | <DOUBLE_LITERAL: ((<SIGN>)? <DIGITS> (("." <DIGITS> (<EXPONENT>)?) | <EXPONENT>)) | (("-")? "Infinity") | "NaN">
  | <INTEGER_LITERAL: <SIGN> <NATURAL_LITERAL>>
  | <NATURAL_LITERAL: "0" | (["1"-"9"] (<DIGIT>)*) | ("0x" <HEX_DIGITS>)>

  | <IF: "if">
  | <THEN: "then">
  | <ELSE: "else">
  | <LET: "let">
  | <IN: "in">
  | <AS: "as">
  | <USING: "using">
  | <MERGE: "merge">
  | <MISSING: "missing">
  | <SOME: "Some">
  | <TOMAP: "toMap">
  | <ASSERT: "assert">
  | <FORALL: "forall" | "âˆ€">
  | <WITH: "with">
  | <TEXT: "Text">
  | <LOCATION: "Location">
  | <BUILT_IN:
      "Natural/fold"
    | "Natural/build"
    | "Natural/isZero"
    | "Natural/even"
    | "Natural/odd"
    | "Natural/toInteger"
    | "Natural/show"
    | "Integer/toDouble"
    | "Integer/show"
    | "Integer/negate"
    | "Integer/clamp"
    | "Natural/subtract"
    | "Double/show"
    | "List/build"
    | "List/fold"
    | "List/length"
    | "List/head"
    | "List/last"
    | "List/indexed"
    | "List/reverse"
    | "Optional/fold"
    | "Optional/build"
    | "Text/show"
    | "Bool"
    | "True"
    | "False"
    | "Optional"
    | "None"
    | "Natural"
    | "Integer"
    | "Double"
    | "Text"
    | "List"
    | "Type"
    | "Kind"
    | "Sort"
    | "Optional"
    | "List"
  >
  | <NONRESERVED_LABEL: <QUOTED_LABEL> | <SIMPLE_LABEL>>
  | <#QUOTED_LABEL: "`" (["\u0020"-"\u005f"] | ["\u0061"-"\u007e"])+ "`">
  | <#SIMPLE_LABEL: (<ALPHA> | "_") (<ALPHA> | <DIGIT> | "_" | "-" | "/" )*>
  | <COMBINE: "/\\" | "\u2227">
  | <COMBINE_TYPES: "//\\\\" | "\u2a53">
  | <EQUIVALENT: "===" | "\u2261">
  | <PREFER: "//" | "\u2afd">
  | <LAMBDA: "\\" | "\u03bb">
  | <ARROW: "->" | "\u2192">
  | <COMPLETE: "::">
  | <DOUBLE_QUOTE_START: "\"">: WITHIN_DOUBLE_QUOTE
  | <SINGLE_QUOTE_START: "''\n">: WITHIN_SINGLE_QUOTE
  | <PARENS_OPEN: "(">
  | <PARENS_CLOSE: ")">
  | <BRACKET_OPEN: "[">
  | <BRACKET_CLOSE: "]">
  | <BRACE_OPEN: "{"> { if (braceDepth.isEmpty()) { braceDepth.push(0); }; braceDepth.push(braceDepth.pop() + 1); ; }
  | <BRACE_CLOSE: "}"> {
    int currentBraceDepth = braceDepth.pop() - 1;
    boolean currentInterpolationState = false;
    if (currentBraceDepth >= 0) {
      braceDepth.push(currentBraceDepth);
    } else {
      currentInterpolationState = interpolationState.pop();
    }
    SwitchTo((currentBraceDepth >= 0)
      ? DEFAULT
      : (currentInterpolationState) ? WITHIN_DOUBLE_QUOTE : WITHIN_SINGLE_QUOTE);
  }
  | <ANGLE_OPEN: "<">
  | <ANGLE_CLOSE: ">">
  | <DOT: ".">
  | <COLON: ":">
  | <COMMA: ",">
  | <BAR: "|">
  | <EQUAL_SIGN: "=">
  | <AT_SIGN: "@">
  | <QUESTION_MARK: "?">
  | <LIST_APPEND: "#">
  | <TIMES: "*">
  | <PLUS: "+">
  | <EQUALS: "==">
  | <NOT_EQUALS: "!=">
  | <AND: "&&">
  | <OR: "||">
  | <CONCAT: "++">
  | <SHA256_HASH: "sha256:" (<HEX_DIGIT>){64}>
  | <ENV: "env:" (<BASH_ENV_VAR> | ("\"" <POSIX_ENV_VAR> "\""))>
  | <HTTP: "http" ("s")? "://" (<USER_INFO> "@")? <HOST> (":" (<DIGIT>)*)? <URL_PATH> ("?" <QUERY>)?>
  | <LOCAL: <PARENT_PATH> | <HERE_PATH> | <HOME_PATH> | <PATH>>
  | <CLASSPATH: "classpath:" <PATH> >
  | <#DIGIT: ["0"-"9"]>
  | <#DIGITS: (<DIGIT>)+>
  | <#HEX_DIGIT: <DIGIT> | ["A"-"F"] | ["a"-"f"]>
  | <#HEX_DIGITS: (<HEX_DIGIT>)+>
  | <#SIGN: "+" | "-">
  | <#EXPONENT: ("E" | "e") (<SIGN>)? <DIGITS>>
  | <#ALPHA: ["A"-"Z"] | ["a"-"z"]>
  | <#ASCII: ["\u0020"-"\u007f"]>
  | <#VALID_NON_ASCII: ["\u0080"-"\uD7FF"] | (["\ud800"-"\udbff"] ["\udc00"-"\udfff"]) | ["\ue000"-"\ufffd"]>
  | <#BASH_ENV_VAR: (<ALPHA> | "_") (<ALPHA> | <DIGIT> | "_")*>
  | <#POSIX_ENV_VAR: ("\u0020" | "\u0021" | ["\u0023"-"\u003c"] | ["\u003e"-"\u005b"] | ["\u005d"-"\u007e"] | ("\\" (["\"", "\\", "a", "b", "f", "n", "r", "t", "v"])))+>

  | <#PCT_ENCODED: "%" <HEX_DIGIT> <HEX_DIGIT>>
  | <#SUB_DELIM: ["!", "$", "&", "'", "*", "+", ";", "="]>
  | <#UNRESERVED: <ALPHA> | <DIGIT> | ["-", ".", "_", "~"]>
  | <#PCHAR: <UNRESERVED> | <PCT_ENCODED> | <SUB_DELIM> | ":" | "@">
  | <#SEGMENT: (<PCHAR>)*>
  | <#USER_INFO: (<UNRESERVED> | <PCT_ENCODED> | <SUB_DELIM> | ":")*>
  | <#QUERY: (<PCHAR> | "/" | "?")*>
  | <#DOMAIN_LABEL: (<ALPHA> | <DIGIT>)+ (("-")+ (<ALPHA> | <DIGIT>)+)*>
  | <#DOMAIN: <DOMAIN_LABEL> ("." <DOMAIN_LABEL>)* (".")?>
  | <#IPV4: <DEC_OCTET> "." <DEC_OCTET> "." <DEC_OCTET> "." <DEC_OCTET>>
  | <#H16: (<HEX_DIGIT>){1,4}>
  | <#LS32: (<H16> ":" <H16>) | <IPV4>>
  | <#IPV6:
      ((<H16> ":"){6} <LS32>)
    | ("::" (<H16> ":"){5} <LS32>)
    | ((<H16>)? "::" (<H16> ":"){4} <LS32>)
    | ((<H16> (":" <H16>){0, 1})? "::" (<H16> ":"){3} <LS32>)
    | ((<H16> (":" <H16>){0, 2})? "::" (<H16> ":"){2} <LS32>)
    | ((<H16> (":" <H16>){0, 3})? "::" <H16> ":" <LS32>)
    | ((<H16> (":" <H16>){0, 4})? "::" <LS32>)
    | ((<H16> (":" <H16>){0, 5})? "::" <H16>)
    | ((<H16> (":" <H16>){0, 6})? "::")
    >
  | <#IPVFUTURE: "v" (<HEX_DIGIT>)+ "." (<UNRESERVED> | <SUB_DELIM> | ":")+>
  | <#DEC_OCTET: ("25" ["0"-"5"]) | ("2" ["0"-"4"] <DIGIT>) | ("1" <DIGIT> <DIGIT>) | (["1"-"9"] <DIGIT>) | <DIGIT>>
  | <#HOST: <DOMAIN> | <IPV4> | ("[" (<IPV6> | <IPVFUTURE>) "]")>
  | <#PATH_CHARACTER:
      ["\u0021", "\u003d", "\u007c", "\u007e"]
    | ["\u0024"-"\u0027"] | ["\u002a"-"\u002b"] | ["\u002d"-"\u002e"]
    | ["\u0030"-"\u003b"] | ["\u0040"-"\u005a"] | ["\u0040"-"\u005a"] | ["\u005e"-"\u007a"]>
  | <#QUOTED_PATH_CHARACTER: ["\u0020"-"\u0021"] | ["\u0023"-"\u002e"] | ["\u0030"-"\u007f"] | <VALID_NON_ASCII>>
  | <#PATH_COMPONENT: "/" ((<PATH_CHARACTER>)+ | ("\"" (<QUOTED_PATH_CHARACTER>)+ "\""))>
  | <#PATH: (<PATH_COMPONENT>)+>
  | <#PARENT_PATH: ".." <PATH>>
  | <#HERE_PATH: "." <PATH>>
  | <#HOME_PATH: "~" <PATH>>
  | <#URL_PATH: (<PATH_COMPONENT> | ("/") <SEGMENT>)*>
}

<WITHIN_DOUBLE_QUOTE> TOKEN: {
  <DOUBLE_QUOTE_INTERPOLATION: "${"> {
    interpolationState.push(true);
    braceDepth.push(0);
    SwitchTo(DEFAULT);
  } |
  <DOUBLE_QUOTE_DOLLAR_SIGN: "$"> |
  <DOUBLE_QUOTE_CHARS: (
      "\u0020" | "\u0021" | "#" | ["\u0025"-"\u005b"] | ["\u005d"-"\u007f"]
    | ("\\" (["\"", "$", "\\", "/", "b", "f", "n", "r", "t"]))
    | ("\\u" <UNICODE_ESCAPE>)
    | <VALID_NON_ASCII>
  )+> |
  <#UNICODE_ESCAPE: <UNBRACED_ESCAPE> | ("{" <BRACED_CODEPOINT> "}")> |
  <#UNBRACED_ESCAPE:
      ((<DIGIT> | "A" | "B" | "C" | "a" | "b" | "c") (<HEX_DIGIT>){3})
    | ("D" ["0"-"7"] <HEX_DIGIT> <HEX_DIGIT>)
    | (("E" | "e") (<HEX_DIGIT>){3})
    | (("F" | "f") <HEX_DIGIT> <HEX_DIGIT> ("A" | "B" | "C" | "D" | "a" | "b" | "c" | "d"))
  > |
  <#BRACED_ESCAPE: ("0")* <BRACED_CODEPOINT>> |
  <#BRACED_CODEPOINT: ((["0"-"9"] | ["A"-"F"] | ["a"-"f"] | "10") <UNICODE_SUFFIX>) | <UNBRACED_ESCAPE> | ((<HEX_DIGIT>){3})+> |
  <#UNICODE_SUFFIX: ((<DIGIT> | ["A"-"E"] | ["a"-"e"]) (<HEX_DIGIT>){3}) | ("F" <HEX_DIGIT> <HEX_DIGIT> (<DIGIT> | ["A"-"D"] | ["a"-"d"]))>
}
<WITHIN_DOUBLE_QUOTE> TOKEN: { <DOUBLE_QUOTE_END: "\"">: DEFAULT }

<WITHIN_SINGLE_QUOTE> TOKEN: {
  <SINGLE_QUOTE_INTERPOLATION: "${"> {
    interpolationState.push(false);
    braceDepth.push(0);
    SwitchTo(DEFAULT);
  } |
  <SINGLE_QUOTE_CHARS: (<ASCII> | <VALID_NON_ASCII> | "\t" | "\n" | "\r\n")>
}
<WITHIN_SINGLE_QUOTE> TOKEN: { <SINGLE_QUOTE_END: "''">: DEFAULT }

Wrapped<String> ANY_LABEL(): {
  Token token;
} {
  (token=<NONRESERVED_LABEL> | token=<BUILT_IN> | token=<TEXT> | token=<LOCATION>) {
    return new Label(token);
  }
}

Wrapped<String> ANY_LABEL_OR_SOME():  {
  Token token = null;
  Wrapped<String> value = null;
} {
  (value=ANY_LABEL() | token=<SOME>) {
    return (value != null) ? value : new Wrapped<String>(token.image, token);
  }
}

Map.Entry<String, Expr.Parsed> DOUBLE_QUOTE_CHUNK(): {
  StringBuilder builder = null;
  Token token0 = null;
  Token token1 = null;
  Expr.Parsed expr = null;
} {
  (
      (<DOUBLE_QUOTE_INTERPOLATION> expr=COMPLETE_EXPRESSION() <BRACE_CLOSE>)
    | (
      (token0=<DOUBLE_QUOTE_DOLLAR_SIGN> | token0=<DOUBLE_QUOTE_CHARS>)
      (LOOKAHEAD(2)
        (token1=<DOUBLE_QUOTE_DOLLAR_SIGN> | token1=<DOUBLE_QUOTE_CHARS>) {
          if (builder == null) {
            builder = new StringBuilder(token0.image);
          }
          builder.append(token1.image);
        }
      )*
    )
  ) {
    if (builder == null) {
      return new SimpleImmutableEntry(token0 == null ? null : token0.image, expr);
    } else {
      return new SimpleImmutableEntry(builder.toString(), expr);
    }
  }
}

Expr.Parsed DOUBLE_QUOTE_LITERAL(): {
  List<Map.Entry<String, Expr.Parsed>> chunks = new ArrayList<>(1);
  Map.Entry<String, Expr.Parsed> current;
  Token first;
  Token last;
} {
  first=<DOUBLE_QUOTE_START>
  (
    current=DOUBLE_QUOTE_CHUNK() {
      chunks.add(current);
    }
  )*
  last=<DOUBLE_QUOTE_END> {
    return ParsingHelpers.makeTextLiteral(chunks, first, last);
  }
}

List<Map.Entry<String, Expr.Parsed>> SINGLE_QUOTE_CONTINUE(): {
  List<Map.Entry<String, Expr.Parsed>> continuation = null;
  Token token = null;
  Expr.Parsed expr = null;
} {

    (
      <SINGLE_QUOTE_INTERPOLATION> expr=COMPLETE_EXPRESSION() <BRACE_CLOSE> continuation=SINGLE_QUOTE_CONTINUE()
    | token=<SINGLE_QUOTE_CHARS> continuation=SINGLE_QUOTE_CONTINUE()
    | <SINGLE_QUOTE_END>
    ) {
      if (continuation == null) {
        return new ArrayList<Map.Entry<String, Expr.Parsed>>();
      } else {
        continuation.add(
          new SimpleImmutableEntry(token == null ? null : token.image, expr)
        );
        return continuation;
      }
    }
}

Expr.Parsed SINGLE_QUOTE_LITERAL(): {
  List<Map.Entry<String, Expr.Parsed>> chunks;
  Token first;
} {
  (
    first=<SINGLE_QUOTE_START> chunks=SINGLE_QUOTE_CONTINUE()
  ) {
    return ParsingHelpers.makeSingleQuotedTextLiteral(chunks, first);
  }
}

Expr.Parsed TEXT_LITERAL(): { Expr.Parsed value; } {
  (value=DOUBLE_QUOTE_LITERAL() | value=SINGLE_QUOTE_LITERAL()) {
    return value;
  }
}

Expr.Parsed IDENTIFIER(): {
  Token valueToken;
  Token whsp0Token = null;
  Token whsp1Token = null;
  Token indexToken = null;
} {
  (
      (
        valueToken=<NONRESERVED_LABEL>
        (
          LOOKAHEAD(2)
          (whsp0Token=<WHSP>)? <AT_SIGN>
          (whsp1Token=<WHSP>)?
          indexToken=<NATURAL_LITERAL>
        )?
      )
    | valueToken=<BUILT_IN>
    | valueToken=<TEXT>
    | valueToken=<LOCATION>
  ) {
    return (indexToken == null)
      ? ParsingHelpers.makeBuiltInOrIdentifier(valueToken)
      : ParsingHelpers.makeIdentifier(valueToken, whsp0Token, whsp1Token, indexToken);
  }
}

Expr.Parsed NON_EMPTY_LIST_LITERAL(): {
  Token first;
  Token last;
  Token t0 = null;
  Token t1 = null;
  Token t2 = null;
  List<String> other = new ArrayList<>();
  StringBuilder currentOther = new StringBuilder("[");
  List<Expr.Parsed> values = new ArrayList<>();
  Expr.Parsed current;
} {
  (
    first=<BRACKET_OPEN>
    (t0=<WHSP> { currentOther.append(t0.image); })?
    (t0=<COMMA> { currentOther.append(t0.image); } (t0=<WHSP> { currentOther.append(t0.image); })?)?
    current=BASE_EXPRESSION() {
      values.add(current);
      other.add(currentOther.toString());
      currentOther.setLength(0);
    }
    (t0=<WHSP> { currentOther.append(t0.image); })?
    (
      t0=<COMMA> { currentOther.append(t0.image); }
      (t0=<WHSP> { currentOther.append(t0.image); })?
      current=BASE_EXPRESSION() {
        values.add(current);
        other.add(currentOther.toString());
        currentOther.setLength(0);
      }
      (t0=<WHSP> { currentOther.append(t0.image); })?
    )*
    last=<BRACKET_CLOSE>
  ) {
    currentOther.append(']');
    other.add(currentOther.toString());
    return ParsingHelpers.makeNonEmptyListLiteral(values, other, first, last);
  }
}


List<Map.Entry<List<String>, Expr.Parsed>> RECORD_LITERAL_ENTRY(Wrapped<String> firstLabel): {
  List<Map.Entry<List<String>, Expr.Parsed>> values = new ArrayList<>();
  List<Map.Entry<List<String>, Expr.Parsed>> next = null;
  List<String> current = new ArrayList<>();
  current.add(firstLabel.value);
  Expr.Parsed expr;
} {
  (
    (
      (
        (
          <EQUAL_SIGN> |
          ((<DOT> [<WHSP>] firstLabel=ANY_LABEL_OR_SOME() { current.add(firstLabel.value); })+ [<WHSP>] <EQUAL_SIGN>)
        )
        [<WHSP>]
        expr=BASE_EXPRESSION() {
          values.add(new SimpleImmutableEntry(current, expr));
          current = new ArrayList<>();
        }
        [<WHSP>]
      ) |
      ({} { values.add(new SimpleImmutableEntry(current, null)); current = new ArrayList<>(); })
    )
      (
        <COMMA>
        [<WHSP>]
        firstLabel=ANY_LABEL_OR_SOME() { current.add(firstLabel.value); }
        [<WHSP>]
        (
          (
            (
              <EQUAL_SIGN> |
              ((<DOT> [<WHSP>] firstLabel=ANY_LABEL_OR_SOME() { current.add(firstLabel.value); })+ [<WHSP>] <EQUAL_SIGN>)
            )
            [<WHSP>]
            expr=BASE_EXPRESSION() {
              values.add(new SimpleImmutableEntry(current, expr));
              current = new ArrayList<>();
            }
            [<WHSP>]
          ) |
          ({} { values.add(new SimpleImmutableEntry(current, null)); current = new ArrayList<>(); })
        )
      )*
      <BRACE_CLOSE>
  ) {
    return values;
  }
}

List<Map.Entry<String, Expr.Parsed>> RECORD_TYPE_ENTRY(Wrapped<String> firstLabel): {
  List<Map.Entry<String, Expr.Parsed>> values = new ArrayList<>();
  List<Map.Entry<String, Expr.Parsed>> next = null;
  Expr.Parsed expr;
} {
  (
    <COLON> <WHSP>
    expr=BASE_EXPRESSION() { values.add(new SimpleImmutableEntry(firstLabel.value, expr)); }
    [<WHSP>]
    (
      <COMMA>
      [<WHSP>]
      firstLabel=ANY_LABEL_OR_SOME()
      [<WHSP>] <COLON> <WHSP>
      expr=BASE_EXPRESSION() { values.add(new SimpleImmutableEntry(firstLabel.value, expr)); }
      [<WHSP>]
    )*
    <BRACE_CLOSE>
  ) {
    return values;
  }
}

Expr.Parsed RECORD_LITERAL_OR_TYPE(): {
  Token first;
  Token last = null;
  Wrapped<String> firstLabel = null;
  List<Map.Entry<List<String>, Expr.Parsed>> literalValues = null;
  List<Map.Entry<String, Expr.Parsed>> typeValues = null;
} {
  (
    first=<BRACE_OPEN>
    (<WHSP>)?
    (<COMMA> (<WHSP>)?)?
    (
        last=<BRACE_CLOSE>
      | (<EQUAL_SIGN> (<WHSP>)? last=<BRACE_CLOSE> { literalValues = new ArrayList<>(); })
      | (
        firstLabel=ANY_LABEL_OR_SOME()
        (<WHSP>)?
        (typeValues=RECORD_TYPE_ENTRY(firstLabel) | literalValues=RECORD_LITERAL_ENTRY(firstLabel))
      )
    )
  ) {
    if (literalValues != null) {
      return ParsingHelpers.makeRecordLiteral(literalValues, first, last);
    } else if (typeValues != null) {
      return ParsingHelpers.makeRecordType(typeValues, first, last);
    } else {
      return ParsingHelpers.makeRecordType(new ArrayList<Map.Entry<String, Expr.Parsed>>(), first, last);
    }
  }
}

Expr.Parsed UNION_TYPE(): {
  Token first;
  Token last;
  Wrapped<String> label;
  Expr.Parsed type = null;
  List<Map.Entry<String, Expr.Parsed>> typeValues = new ArrayList<>();
} {
  (
    first=<ANGLE_OPEN>
    [<WHSP>]
    [<BAR> [<WHSP>]]
    (
        last=<ANGLE_CLOSE>
      | (
        (
          label=ANY_LABEL_OR_SOME()
          [<WHSP>]
          (
            [<COLON> <WHSP> type=BASE_EXPRESSION() [<WHSP>]] {
              typeValues.add(new SimpleImmutableEntry(label.value, type));
              type = null;
            }
            (
              <BAR>
              [<WHSP>]
              label=ANY_LABEL_OR_SOME()
              [<WHSP>]
              [<COLON> <WHSP> type=BASE_EXPRESSION() [<WHSP>]] {
                typeValues.add(new SimpleImmutableEntry(label.value, type));
                type = null;
              }
            )*
          )
        )
        last=<ANGLE_CLOSE>
      )
    )
  ) {
    return ParsingHelpers.makeUnionType(typeValues, first, last);
  }
}

Expr.Parsed PARENTHESIZED_EXPRESSION(): {
  Expr.Parsed value;
  Token first;
  Token last;
} {
  (first=<PARENS_OPEN> value=COMPLETE_EXPRESSION() last=<PARENS_CLOSE>) {
    return ParsingHelpers.makeParenthesized(value, first, last);
  }
}

Expr.Parsed DOUBLE_LITERAL():  { Token token; } { token=<DOUBLE_LITERAL>  { return ParsingHelpers.makeDoubleLiteral(token);  }}
Expr.Parsed INTEGER_LITERAL(): { Token token; } { token=<INTEGER_LITERAL> { return ParsingHelpers.makeIntegerLiteral(token); }}
Expr.Parsed NATURAL_LITERAL(): { Token token; } { token=<NATURAL_LITERAL> { return ParsingHelpers.makeNaturalLiteral(token); }}

Expr.Parsed PRIMITIVE_EXPRESSION(): { Expr.Parsed expr; } {
  (
      expr=DOUBLE_LITERAL()
    | expr=NATURAL_LITERAL()
    | expr=INTEGER_LITERAL()
    | expr=TEXT_LITERAL()
    | expr=RECORD_LITERAL_OR_TYPE()
    | expr=UNION_TYPE()
    | expr=NON_EMPTY_LIST_LITERAL()
    | expr=IDENTIFIER()
    | expr=PARENTHESIZED_EXPRESSION()
  ) { return expr; }
}

Wrapped<List<String>> LABEL_SELECTOR(): {
  List<String> labels = new ArrayList<String>();
  Wrapped<String> current;
  Token first = null;
  Token last = null;
} {
  (
    first=<BRACE_OPEN> (<WHSP>)?
    (
      current=ANY_LABEL_OR_SOME() { labels.add(current.value); }
      (<WHSP>)?
      (<COMMA> (<WHSP>)? current=ANY_LABEL_OR_SOME() { labels.add(current.value); } (<WHSP>)?)*
    )?
    last=<BRACE_CLOSE>
  ) {
    return new Wrapped(labels, first, last);
  }
}

Wrapped<Expr.Parsed> TYPE_SELECTOR(): {
  Token first;
  Token last;
  Expr.Parsed expr;
} {
  (first=<PARENS_OPEN> (<WHSP>)? expr=BASE_EXPRESSION() (<WHSP>)? last=<PARENS_CLOSE>) {
    return new Positioned.Wrapped(expr, first, last);
  }
}

Expr.Parsed SELECTOR_EXPRESSION(): {
  Expr.Parsed base;
  Wrapped<String> label = null;
  Wrapped<List<String>> labels = null;
  Wrapped<Expr.Parsed> type = null;
  Token whsp0 = null;
  Token whsp1 = null;
} {
  (
    base=PRIMITIVE_EXPRESSION()
    (
      LOOKAHEAD(2)
      (whsp0=<WHSP>)? <DOT> (whsp1=<WHSP>)?
      (label=ANY_LABEL() | labels=LABEL_SELECTOR() | type=TYPE_SELECTOR()) {
        if (label != null) {
          base = ParsingHelpers.makeFieldAccess(base, label, whsp0, whsp1);
        } else if (labels != null) {
          base = ParsingHelpers.makeProjection(base, labels.value, labels.endLine, labels.endColumn);
        } else {
          base = ParsingHelpers.makeProjectionByType(base, type.value, type.endLine, type.endColumn);
        }
        label = null;
        labels = null;
        type = null;
        whsp0 = null;
        whsp1 = null;
      }
    )*
  ) {
    return base;
  }
}

Expr.Parsed COMPLETION_EXPRESSION(): {
  Expr.Parsed base;
  Expr.Parsed completion = null;
  Token operatorToken;
  Token whsp0 = null;
  Token whsp1 = null;
} {
  (
    base=SELECTOR_EXPRESSION()
    (
      LOOKAHEAD(2)
      [whsp0=<WHSP>] operatorToken=<COMPLETE> [whsp1=<WHSP>]
      completion=SELECTOR_EXPRESSION() {
        base = ParsingHelpers.makeOperatorApplication(Operator.COMPLETE, base, completion, operatorToken, whsp0, whsp1);
      }
    )?
  ) {
    return base;
  }
}

Expr.Parsed IMPORT(): {
  Token token = null;
  Token hash = null;
  Token asValue = null;
  Expr.Parsed using = null;
} {
  (
    (
        token=<MISSING>
      | token=<LOCAL>
      | (token=<HTTP> (LOOKAHEAD(2) [<WHSP>] <USING> <WHSP> using=IMPORT_EXPRESSION())?)
      | token=<ENV>
      | token=<CLASSPATH>
    )
    (LOOKAHEAD(2) <WHSP> hash=<SHA256_HASH>)?
    (LOOKAHEAD(2) [<WHSP>] <AS> <WHSP> (asValue=<TEXT> | asValue=<LOCATION>))?
  ) {
    return ParsingHelpers.makeImport(token, hash, asValue, using);
  }
}

Expr.Parsed IMPORT_EXPRESSION(): { Expr.Parsed expr; } {
  (expr=IMPORT() | expr=COMPLETION_EXPRESSION()) { return expr; }
}

Expr.Parsed APPLICATION_EXPRESSION(): {
  Token first = null;
  Token whsp0;
  Token whsp1;
  Expr.Parsed base = null;
  Expr.Parsed current0;
  Expr.Parsed current1;
  Token whsp2 = null;
  Token whsp3 = null;
  Expr.Parsed expr;
  Expr.Parsed other;
  Expr.Parsed type = null;
} {
  (
    (
      (first=<MERGE>
      whsp0=<WHSP>
      expr=IMPORT_EXPRESSION()
      whsp1=<WHSP>
      other=IMPORT_EXPRESSION()
      (LOOKAHEAD(2)
        (whsp2=<WHSP>)?
        <COLON>
        whsp3=<WHSP>
        type=APPLICATION_EXPRESSION()
      )?) {
        base = ParsingHelpers.makeMerge(expr, other, type, first, whsp0, whsp1, whsp2, whsp3);
      }
      |
      (first=<SOME> whsp0=<WHSP> current0=IMPORT_EXPRESSION() { base = ParsingHelpers.makeApplication(ParsingHelpers.makeBuiltInOrIdentifier(first), current0, whsp0); })
      | //LOOKAHEAD(10)//<TOMAP> <WHSP> IMPORT_EXPRESSION() (<WHSP>)? <COLON>)
      (first=<TOMAP>
      whsp0=<WHSP>
      expr=IMPORT_EXPRESSION()
      (LOOKAHEAD(2)
        (whsp2=<WHSP>)?
        <COLON>
        whsp3=<WHSP>
        type=APPLICATION_EXPRESSION()
      )?) {
          base = ParsingHelpers.makeToMap(expr, type, first, whsp0, whsp2, whsp3);
      }
      | base=IMPORT_EXPRESSION()
    ) (
      LOOKAHEAD(2)
      whsp0=<WHSP> current0=IMPORT_EXPRESSION() { base = ParsingHelpers.makeApplication(base, current0, whsp0); }
    )*
  ) {
    return base;
  }
}

Map.Entry<List<String>, Expr.Parsed> WITH_ENTRY(): {
  List<String> labels = new ArrayList<String>();
  Wrapped<String> current;
  Expr.Parsed expr;
} {
  (
    current=ANY_LABEL_OR_SOME() { labels.add(current.value); }
    (LOOKAHEAD(2) (<WHSP>)? <DOT> (<WHSP>)? current=ANY_LABEL_OR_SOME() { labels.add(current.value); })*
    (<WHSP>)?
    <EQUAL_SIGN>
    (<WHSP>)?
    expr=APPLICATION_EXPRESSION()
  ) {
    return new SimpleImmutableEntry(labels, expr);
  }
}

Expr.Parsed WITH_EXPRESSION(): {
  Expr.Parsed base;
  Map.Entry<List<String>, Expr.Parsed> current;
  Token first;
} {
  (
    base=APPLICATION_EXPRESSION()
    (
      LOOKAHEAD(2)
      first=<WHSP> <WITH> <WHSP>
      current=WITH_ENTRY() { base = ParsingHelpers.makeWith(base, current.getKey(), current.getValue(), first); }
    )*
  ) {
    return base;
  }
}

Expr.Parsed EQUIVALENT_EXPRESSION(): {
  Expr.Parsed base;
  Expr.Parsed arg;
  Token operator;
  Token whsp0 = null;
  Token whsp1 = null;
} {
  (
    base=WITH_EXPRESSION()
    (
      LOOKAHEAD(2)
      (whsp0=<WHSP>)?
      operator=<EQUIVALENT> (whsp1=<WHSP>)? arg=WITH_EXPRESSION() {
        base = ParsingHelpers.makeOperatorApplication(Operator.parse(operator.image), base, arg, operator, whsp0, whsp1);
        whsp0 = null;
        whsp1 = null;
      }
    )*
  ) {
    return base;
  }
}

Expr.Parsed NOT_EQUALS_EXPRESSION(): {
  Expr.Parsed base;
  Expr.Parsed arg;
  Token operator;
  Token whsp0 = null;
  Token whsp1 = null;
} {
  (
    base=EQUIVALENT_EXPRESSION()
    (
      LOOKAHEAD(2)
      (whsp0=<WHSP>)?
      operator=<NOT_EQUALS> (whsp1=<WHSP>)? arg=EQUIVALENT_EXPRESSION() {
        base = ParsingHelpers.makeOperatorApplication(Operator.parse(operator.image), base, arg, operator, whsp0, whsp1);
        whsp0 = null;
        whsp1 = null;
      }
    )*
  ) {
    return base;
  }
}

Expr.Parsed EQUALS_EXPRESSION(): {
  Expr.Parsed base;
  Expr.Parsed arg;
  Token operator;
  Token whsp0 = null;
  Token whsp1 = null;
} {
  (
    base=NOT_EQUALS_EXPRESSION()
    (
      LOOKAHEAD(2)
      (whsp0=<WHSP>)?
      operator=<EQUALS> (whsp1=<WHSP>)? arg=NOT_EQUALS_EXPRESSION() {
        base = ParsingHelpers.makeOperatorApplication(Operator.parse(operator.image), base, arg, operator, whsp0, whsp1);
        whsp0 = null;
        whsp1 = null;
      }
    )*
  ) {
    return base;
  }
}

Expr.Parsed TIMES_EXPRESSION(): {
  Expr.Parsed base;
  Expr.Parsed arg;
  Token operator;
  Token whsp0 = null;
  Token whsp1 = null;
} {
  (
    base=EQUALS_EXPRESSION()
    (
      LOOKAHEAD(2)
      (whsp0=<WHSP>)?
      operator=<TIMES> (whsp1=<WHSP>)? arg=EQUALS_EXPRESSION() {
        base = ParsingHelpers.makeOperatorApplication(Operator.parse(operator.image), base, arg, operator, whsp0, whsp1);
        whsp0 = null;
        whsp1 = null;
      }
    )*
  ) {
    return base;
  }
}

Expr.Parsed COMBINE_TYPES_EXPRESSION(): {
  Expr.Parsed base;
  Expr.Parsed arg;
  Token operator;
  Token whsp0 = null;
  Token whsp1 = null;
} {
  (
    base=TIMES_EXPRESSION()
    (
      LOOKAHEAD(2)
      (whsp0=<WHSP>)?
      operator=<COMBINE_TYPES> (whsp1=<WHSP>)? arg=TIMES_EXPRESSION() {
        base = ParsingHelpers.makeOperatorApplication(Operator.parse(operator.image), base, arg, operator, whsp0, whsp1);
        whsp0 = null;
        whsp1 = null;
      }
    )*
  ) {
    return base;
  }
}

Expr.Parsed PREFER_EXPRESSION(): {
  Expr.Parsed base;
  Expr.Parsed arg;
  Token operator;
  Token whsp0 = null;
  Token whsp1 = null;
} {
  (
    base=COMBINE_TYPES_EXPRESSION()
    (
      LOOKAHEAD(2)
      (whsp0=<WHSP>)?
      operator=<PREFER> (whsp1=<WHSP>)? arg=COMBINE_TYPES_EXPRESSION() {
        base = ParsingHelpers.makeOperatorApplication(Operator.parse(operator.image), base, arg, operator, whsp0, whsp1);
        whsp0 = null;
        whsp1 = null;
      }
    )*
  ) {
    return base;
  }
}

Expr.Parsed COMBINE_EXPRESSION(): {
  Expr.Parsed base;
  Expr.Parsed arg;
  Token operator;
  Token whsp0 = null;
  Token whsp1 = null;
} {
  (
    base=PREFER_EXPRESSION()
    (
      LOOKAHEAD(2)
      (whsp0=<WHSP>)?
      operator=<COMBINE> (whsp1=<WHSP>)? arg=PREFER_EXPRESSION() {
        base = ParsingHelpers.makeOperatorApplication(Operator.parse(operator.image), base, arg, operator, whsp0, whsp1);
        whsp0 = null;
        whsp1 = null;
      }
    )*
  ) {
    return base;
  }
}

Expr.Parsed AND_EXPRESSION(): {
  Expr.Parsed base;
  Expr.Parsed arg;
  Token operator;
  Token whsp0 = null;
  Token whsp1 = null;
} {
  (
    base=COMBINE_EXPRESSION()
    (
      LOOKAHEAD(2)
      (whsp0=<WHSP>)?
      operator=<AND> (whsp1=<WHSP>)? arg=COMBINE_EXPRESSION() {
        base = ParsingHelpers.makeOperatorApplication(Operator.parse(operator.image), base, arg, operator, whsp0, whsp1);
        whsp0 = null;
        whsp1 = null;
      }
    )*
  ) {
    return base;
  }
}

Expr.Parsed LIST_APPEND_EXPRESSION(): {
  Expr.Parsed base;
  Expr.Parsed arg;
  Token operator;
  Token whsp0 = null;
  Token whsp1 = null;
} {
  (
    base=AND_EXPRESSION()
    (
      LOOKAHEAD(2)
      (whsp0=<WHSP>)?
      operator=<LIST_APPEND> (whsp1=<WHSP>)? arg=AND_EXPRESSION() {
        base = ParsingHelpers.makeOperatorApplication(Operator.parse(operator.image), base, arg, operator, whsp0, whsp1);
        whsp0 = null;
        whsp1 = null;
      }
    )*
  ) {
    return base;
  }
}

Expr.Parsed TEXT_APPEND_EXPRESSION(): {
  Expr.Parsed base;
  Expr.Parsed arg;
  Token operator;
  Token whsp0 = null;
  Token whsp1 = null;
} {
  (
    base=LIST_APPEND_EXPRESSION()
    (
      LOOKAHEAD(2)
      (whsp0=<WHSP>)?
      operator=<CONCAT> (whsp1=<WHSP>)? arg=LIST_APPEND_EXPRESSION() {
        base = ParsingHelpers.makeOperatorApplication(Operator.parse(operator.image), base, arg, operator, whsp0, whsp1);
        whsp0 = null;
        whsp1 = null;
      }
    )*
  ) {
    return base;
  }
}

Expr.Parsed PLUS_EXPRESSION(): {
  Expr.Parsed base;
  Expr.Parsed arg;
  Token operator;
  Token whsp0 = null;
  Token whsp1 = null;
} {
  (
    base=TEXT_APPEND_EXPRESSION()
    (
      LOOKAHEAD(2)
      (whsp0=<WHSP>)?
      operator=<PLUS> whsp1=<WHSP> arg=TEXT_APPEND_EXPRESSION() {
        base = ParsingHelpers.makeOperatorApplication(Operator.parse(operator.image), base, arg, operator, whsp0, whsp1);
        whsp0 = null;
      }
    )*
  ) {
    return base;
  }
}

Expr.Parsed OR_EXPRESSION(): {
  Expr.Parsed base;
  Expr.Parsed arg;
  Token operator;
  Token whsp0 = null;
  Token whsp1 = null;
} {
  (
    base=PLUS_EXPRESSION()
    (
      LOOKAHEAD(2)
      (whsp0=<WHSP>)?
      operator=<OR> (whsp1=<WHSP>)? arg=PLUS_EXPRESSION() {
        base = ParsingHelpers.makeOperatorApplication(Operator.parse(operator.image), base, arg, operator, whsp0, whsp1);
        whsp0 = null;
        whsp1 = null;
      }
    )*
  ) {
    return base;
  }
}

Expr.Parsed IMPORT_ALT_EXPRESSION(): {
  Expr.Parsed base;
  Expr.Parsed arg;
  Token operator;
  Token whsp0 = null;
  Token whsp1 = null;
} {
  (
    base=OR_EXPRESSION()
    (
      LOOKAHEAD(2)
      (whsp0=<WHSP>)?
      operator=<QUESTION_MARK> whsp1=<WHSP> arg=OR_EXPRESSION() {
        base = ParsingHelpers.makeOperatorApplication(Operator.parse(operator.image), base, arg, operator, whsp0, whsp1);
        whsp0 = null;
      }
    )*
  ) {
    return base;
  }
}

Expr.Parsed OPERATOR_EXPRESSION(): { Expr.Parsed expr; } { expr = IMPORT_ALT_EXPRESSION() { return expr; } }

Expr.Parsed EMPTY_LIST_LITERAL(): {
  Expr.Parsed type;
  Token first;
  Token t0;
  StringBuilder builder = new StringBuilder('[');
} {
  (
    first=<BRACKET_OPEN>
    (t0=<WHSP> { builder.append(t0.image); })?
    (<COMMA> { builder.append(','); } (t0=<WHSP> { builder.append(t0.image); })?)?
    <BRACKET_CLOSE> { builder.append(']'); }
    (t0=<WHSP> { builder.append(t0.image); })?
    <COLON>
    t0=<WHSP> {
      builder.append(':');
      builder.append(t0.image);
    }
    type=APPLICATION_EXPRESSION()) {
    return ParsingHelpers.makeEmptyListLiteral(type, builder.toString(), first);
  }
}

Expr.Parsed LAMBDA_EXPRESSION(): {
  Expr.Parsed type;
  Expr.Parsed body;
  Token first;
  Token param;
} {
  (
    first=<LAMBDA> (<WHSP>)? <PARENS_OPEN> (<WHSP>)?
    (param=<NONRESERVED_LABEL> | param=<TEXT> | param=<LOCATION>) (<WHSP>)? <COLON> <WHSP>
    type=BASE_EXPRESSION() (<WHSP>)? <PARENS_CLOSE> (<WHSP>)? <ARROW> (<WHSP>)?
    body=BASE_EXPRESSION()
  ) {
    return ParsingHelpers.makeLambda(trimLabel(param.image), type, body, first);
  }
}

LetBinding LET_BINDING(): {
  Token first;
  Token whsp;
  Token name;
  Expr.Parsed type = null;
  Expr.Parsed value;
  StringBuilder builder = new StringBuilder();
  String text0 = null;
  String text2 = null;
} {
  (
    first=<LET>
    whsp=<WHSP>
    (name=<NONRESERVED_LABEL> | name=<TEXT> | name=<LOCATION>) {
      builder.append(first.image);
      builder.append(whsp.image);
      builder.append(name.image);
    }
    (whsp=<WHSP> { builder.append(whsp.image); })?
    (
      <COLON> whsp=<WHSP> {
        builder.append(':');
        builder.append(whsp.image);
        text0 = builder.toString();
        builder.setLength(0);
      }
      type=BASE_EXPRESSION()
      (whsp=<WHSP> { builder.append(whsp.image); })?
    )?
    <EQUAL_SIGN> { builder.append('='); }
    (whsp=<WHSP> { builder.append(whsp.image); })?
    value=BASE_EXPRESSION()
    (whsp=<WHSP> { text2 = whsp.image; })?
  ) {
    return new LetBinding(trimLabel(name.image), type, value, text0, builder.toString(), text2, first.beginLine, first.beginColumn);
  }
}

Expr.Parsed LET_EXPRESSION(): {
  LetBinding current = null;
  List<LetBinding> bindings = new ArrayList<>();
  Expr.Parsed body;
  Token whsp;
} {
  (
    (current=LET_BINDING() { bindings.add(current); })+ <IN> whsp=<WHSP> body=BASE_EXPRESSION()
  ) {
    return ParsingHelpers.makeLet(bindings, body, whsp.image);
  }
}

Expr.Parsed IF_EXPRESSION(): {
  Token first;
  Expr.Parsed condition;
  Expr.Parsed thenValue;
  Expr.Parsed elseValue;
} {
  (
    first=<IF> <WHSP> condition=BASE_EXPRESSION() (<WHSP>)? <THEN> <WHSP> thenValue=BASE_EXPRESSION() (<WHSP>)? <ELSE> <WHSP> elseValue=BASE_EXPRESSION()
  ) {
    return ParsingHelpers.makeIf(condition, thenValue, elseValue, first);
  }
}

Expr.Parsed FORALL_EXPRESSION(): {
  Token first;
  Token param;
  Expr.Parsed input;
  Expr.Parsed result;
} {
  (
    first=<FORALL> (<WHSP>)? <PARENS_OPEN> (<WHSP>)?
    (param=<NONRESERVED_LABEL> | param=<TEXT> | param=<LOCATION>) (<WHSP>)? <COLON> <WHSP>
    input=BASE_EXPRESSION() (<WHSP>)? <PARENS_CLOSE> (<WHSP>)? <ARROW> (<WHSP>)?
    result=BASE_EXPRESSION()
  ) {
    return ParsingHelpers.makePi(trimLabel(param.image), input, result, first);
  }
}

Expr.Parsed ASSERT_EXPRESSION(): {
  Token first;
  Token whsp0 = null;
  Token whsp1 = null;
  Expr.Parsed value;
} {
  (first=<ASSERT> (whsp0=<WHSP>)? <COLON> whsp1=<WHSP> value=BASE_EXPRESSION()) {
    return ParsingHelpers.makeAssert(value, first, whsp0, whsp1);
  }
}

Expr.Parsed FUNCTION_TYPE(): {
  Expr.Parsed input;
  Expr.Parsed result;
} {
  (input=OPERATOR_EXPRESSION() (<WHSP>)? <ARROW> (<WHSP>)? result=BASE_EXPRESSION()) {
    return ParsingHelpers.makePi(input, result);
  }
}

Expr.Parsed ANNOTATED_EXPRESSION(): {
  Expr.Parsed base;
  Expr.Parsed type = null;
  Token whsp0 = null;
  Token whsp1 = null;
} {
  (
    base=OPERATOR_EXPRESSION() (LOOKAHEAD(2) (whsp0=<WHSP>)? <COLON> whsp1=<WHSP> type=BASE_EXPRESSION())?
  ) {
    return (type == null) ? base : ParsingHelpers.makeAnnotated(base, type, whsp0, whsp1);
  }
}

Expr.Parsed FUNCTION_TYPE_OR_ANNOTATED_EXPRESSION(): {
  Expr.Parsed base;
  Expr.Parsed type = null;
  Expr.Parsed result = null;
  Token whsp0 = null;
  Token whsp1 = null;
} {
  (
    base=OPERATOR_EXPRESSION()
    (LOOKAHEAD(2)
      [whsp0=<WHSP>]
      ((<ARROW> [<WHSP>] result=BASE_EXPRESSION()) |
      (<COLON> whsp1=<WHSP> type=BASE_EXPRESSION()))
    )?
  ) {
    if (type == null) {
      if (result == null) {
        return base;
      } else {
        return ParsingHelpers.makePi(base, result);
      }
    } else {
      return ParsingHelpers.makeAnnotated(base, type, whsp0, whsp1);
    }
  }
}

Expr.Parsed BASE_EXPRESSION(): {
  Expr.Parsed expr = null;
  Expr.Parsed other = null;
  Expr.Parsed type = null;
  Token operator = null;
  Token whsp0 = null;
  Token whsp1 = null;
  Token whsp2 = null;
  Token whsp3 = null;
} {
  (
      expr=LAMBDA_EXPRESSION()
    | expr=IF_EXPRESSION()
    | expr=LET_EXPRESSION()
    | expr=FORALL_EXPRESSION()
    | LOOKAHEAD(EMPTY_LIST_LITERAL()) expr=EMPTY_LIST_LITERAL()
    | expr=ASSERT_EXPRESSION()
    | expr=FUNCTION_TYPE_OR_ANNOTATED_EXPRESSION()
  ) {
    return expr;
  }
}

void TEST(): {} { IMPORT() <EOF> }

Expr.Parsed COMPLETE_EXPRESSION(): { Expr.Parsed expr; } { ((<WHSP>)? expr=BASE_EXPRESSION() (<WHSP>)?) { return expr; }}

Expr.Parsed TOP_LEVEL(): { Expr.Parsed expr; } { (expr=COMPLETE_EXPRESSION() <EOF>) { return expr; }}